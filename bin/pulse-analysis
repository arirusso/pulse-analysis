#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require "pulse-analysis"
require "pulse-analysis/console"

require "optparse"
require "tty-spinner"

def help(opts)
  puts(opts)
  exit
end

options = {}

parser = OptionParser.new do |opts|

  opts.banner = "Usage: pulse-analysis [file] [options]"
  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-aAMPLITUDE", "--amplitude_threshold=AMPLITUDE", "Amplitude Threshold") do |amplitude|
    options[:amplitude_threshold] = amplitude.to_f
  end

  opts.on("-lLENGTH", "--length_threshold=LENGTH", "Length Threshold") do |length|
    options[:length_threshold] = length.to_i
  end

  opts.on("-q", "--quiet", "Quiet") do |quiet|
    options[:quiet] = quiet
  end

  opts.on("-oFILE", "--output-file=FILE", "Output File (YAML)") do |file|
    options[:output_file] = file
  end

  opts.on_tail("-h", "--help", "Show this message") { help(opts) }

  opts.on_tail("--version", "Show version") do
    puts PulseAnalysis::VERSION
    exit
  end

  help(opts) if ARGV.empty?
end

parser.parse!

unless options[:output_file].nil?
  File.open(options[:output_file], "w") do |f|
    f.write("")
  end
end

sound = PulseAnalysis::Sound.load(ARGV[0])

if options[:quiet]
  analysis = PulseAnalysis::Analysis.new(sound, options)
  analysis.run
  analysis.validate
  report = PulseAnalysis::Report.new(analysis)
else
  spinner = TTY::Spinner.new("[:spinner] :title")
  analysis = nil
  report = nil

  spinner.update(title: "Reading file #{ARGV[0]}")
  spinner.run("Done!") { analysis = PulseAnalysis::Analysis.new(sound, options) }

  spinner.update(title: "Running analysis")
  spinner.run("Done!") do
    analysis.run
    analysis.validate
  end

  spinner.update(title: "Generating Report")
  spinner.run("Done!") { report = PulseAnalysis::Report.new(analysis) }

  puts

  table = PulseAnalysis::Console::Table.build(report)
  puts(table.content)
end

unless options[:output_file].nil?
  require "yaml"

  File.open(options[:output_file], "w") do |f|
    f.write(output.to_h.to_yaml)
  end
end
