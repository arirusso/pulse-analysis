#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), "..", "lib"))

require "pulse-analysis"

require "optparse"
require "terminal-table"
require "tty-spinner"

def help(opts)
  puts(opts)
  exit
end

options = {}

parser = OptionParser.new do |opts|

  opts.banner = "Usage: pulse-analysis [file] [options]"
  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-aAMPLITUDE", "--amplitude_threshold=AMPLITUDE", "Amplitude Threshold") do |amplitude|
    options[:amplitude_threshold] = amplitude
  end

  opts.on("-lLENGTH", "--length_threshold=LENGTH", "Length Threshold") do |length|
    options[:length_threshold] = length
  end

  opts.on_tail("-h", "--help", "Show this message") { help(opts) }

  opts.on_tail("--version", "Show version") do
    puts PulseAnalysis::VERSION
    exit
  end

  help(opts) if ARGV.empty?
end

parser.parse!

spinner = TTY::Spinner.new("[:spinner] :title")
analysis = nil
report = nil

spinner.update(title: "Reading file #{ARGV[0]}")
spinner.run("Done!") { analysis = PulseAnalysis::Analysis.new(ARGV[0], options) }
spinner.update(title: "Running analysis")
spinner.run("Done!") { analysis.run }
spinner.update(title: "Generating Report")
spinner.run("Done!") { report = PulseAnalysis::Report.new(analysis) }

value_colspan = report.items.map { |item| item[:value] }.map(&:count).max

table = Terminal::Table.new(title: "Pulse Analysis", headings: ["Item", { value: "Value", colspan: value_colspan }]) do |table|

  report.items.each do |item|

    row = [item[:description]]
    if item[:value].kind_of?(Array)
      # item has multiple units of measure
      item[:value].each_with_index do |value, i|
        cell = {
          value: "#{value[:value]} (#{value[:unit]})",
        }
        # make up remaining colspan
        if item[:value].last == value
          cell[:colspan] = value_colspan - i
        end
        row << cell
      end
    else
      # item has single unit of measure
      value = item[:value]
      row << {
        value: "#{value[:value]} (#{value[:unit]})",
        colspan: value_colspan # full width
      }
    end
    table << row

  end

end

puts(table)
